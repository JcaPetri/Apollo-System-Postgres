-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysEntity_Tbl table
-- Contains the entities information. 
-- The entities exists since you create them in this table. 
-- It's information, of what are they, are in the BaseElement_Tbl table.
-- The primary key: is the union of EntityIDn + MicroserviceIDn + BusinessUnitID.
-- When MicroserviceIDn = System, all microservices have acces to them.
-- The System Entity is generated in the SysEntity_Tbl for a BusinessUnit and Microservice.
-- The data is created in the BaseElement_Tbl in the System BusinessUnit, and is the same to all the microservice.
-- When I create the entity, I define the business unit owner and the microservice it belongs to.


-- #########################################################################################################################################################################################
-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- First create the sequence SysEntity_seq
-- 
DROP SEQUENCE IF EXISTS public."SysEntity_Seq" CASCADE;

CREATE SEQUENCE public."SysEntity_Seq"
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 2147483647
    CACHE 1;

ALTER SEQUENCE public."SysEntity_Seq"
    OWNER TO postgres;

COMMENT ON SEQUENCE public."SysEntity_Seq"
    IS 'The sequence SysEntity_seq generate the nextval of the IDNum';


-- #########################################################################################################################################################################################
-- First create the SysEntityStructure_Tbl table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysEntity_Tbl
DROP TABLE IF EXISTS public."SysEntity_Tbl" CASCADE;

CREATE TABLE IF NOT EXISTS public."SysEntity_Tbl"
(
    "IDNum" integer NOT NULL DEFAULT nextval('"SysEntityStructure_Seq"'::regclass),
    "ID" uuid NOT NULL DEFAULT uuid_generate_v4 (),
    "EntityIDn" integer NOT NULL,
    "MicroserviceIDn" integer NOT NULL,
    "BusinessUnitIDn" integer NOT NULL,
    "EntityTypeIDn" integer NOT NULL,
    "StateIDn" smallint NOT NULL,
    "CreatedByIDn" integer NOT NULL,
    "LastModifiedByIDn" integer NOT NULL,
    "OwnerIDn" integer NOT NULL,
    "DateCreated" timestamp without time zone NOT NULL,
    "DateTimeStamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "TableHistory" text COLLATE pg_catalog."default",
    CONSTRAINT "SenPk_IDNum" PRIMARY KEY ("IDNum"),
    CONSTRAINT "SenUnique_ID" UNIQUE ("ID"),
    CONSTRAINT "SenUnique_IDnEntityMicroserviceBusinessUnit" UNIQUE ("EntityIDn", "MicroserviceIDn", "BusinessUnitIDn")
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."SysEntity_Tbl"
    OWNER to postgres;

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Create the comments of the table fields elements
-- 
COMMENT ON TABLE public."SysEntity_Tbl"
    IS 'Contains the entities information. 
The entity exist since you create it in this table. ItÂ´s information, of what are they, are in the BaseElement table.
The primary key: is the union of EntityIDn + MicroserviceIDn + BusinessUnitID.
When MicroserviceIDn = System, all microservices have acces to them.
The System Entity is generated in the SysEntity_Tbl for a BusinessUnit and Microservice.
The data is created in the BaseElement_Tbl in the System BusinessUnit, and is the same to all the microservice.
When I create the entity, I define the business unit owner and the microservice it belongs to.';

COMMENT ON COLUMN public."SysEntityStructure_Tbl"."IDNum"
    IS 'The IDNum is the autoincrement number';

COMMENT ON COLUMN public."SysEntityStructure_Tbl"."ID"
    IS 'The ID is the uniqueidentifier auto generated V4';

COMMENT ON COLUMN public."SysEntity_Tbl"."EntityIDn"
    IS 'The EntityIDn is the IDNum of the entity, 1=tSisEntity or 3=tSisTable. Link with the diccionary table - SysBaseElement.';

COMMENT ON COLUMN public."SysRootElement_Tbl"."MicroserviceIDn"
    IS 'The MicroserviceIDn is the IDNum of the microservice to which the entity belongs. If its value is System all microservices have access to it.';

COMMENT ON COLUMN public."SysEntity_Tbl"."BusinessUnitIDn"
    IS 'The BusinessUnitIDn is the business unit that the entities belong. Link with the SysCompany.';

COMMENT ON COLUMN public."SysEntity_Tbl"."EntityTypeIDn"
    IS 'The EntityTypeIDn is the IDNum of the entity type, 1=tSisEntity or 3=tSisTable. Link with the diccionary table - SysBaseElement.';

COMMENT ON COLUMN public."SysEntity_Tbl"."StateIDn"
    IS 'The StatedIDn is the IDNum that define if the record is enable or not.';

COMMENT ON COLUMN public."SysEntity_Tbl"."CreatedByIDn"
    IS 'The CreatedByIDn is the IDNum of the user who created the record.';

COMMENT ON COLUMN public."SysEntity_Tbl"."LastModifiedByIDn"
    IS 'The LastModifiedByIDn is the IDNum of the last user who modified the record.';

COMMENT ON COLUMN public."SysEntity_Tbl"."OwnerIDn"
    IS 'The OwnerIDn is the IDNum of the record owner.';

COMMENT ON COLUMN public."SysEntity_Tbl"."DateCreated"
    IS 'The DateCreated is the record creation datetime UTC.';

COMMENT ON COLUMN public."SysEntity_Tbl"."DateTimeStamp"
    IS 'The DateTimeStamp is the datetime UTC of the last modification.';

COMMENT ON COLUMN public."SysEntity_Tbl"."TableHistory"
    IS 'The TableHistory contain then change history of each column.';

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Create the comments of the constraint elements
-- 
COMMENT ON CONSTRAINT "SenPk_IDNum" ON public."SysEntity_Tbl"
    IS 'The sequence SysEntity_seq generate the nextval';

COMMENT ON CONSTRAINT "SenUnique_ID" ON public."SysEntity_Tbl"
    IS 'Is the uniqueidentifier';

COMMENT ON CONSTRAINT "SenUnique_IDnEntityMicroserviceBusinessUnit" ON public."SysEntity_Tbl"
    IS 'An entity can be unique for a Microservice and a business unit.';

-- #########################################################################################################################################################################################
-- Second create the trigger before insert
--	Step 1: create the function before insert
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FUNCTION: public.SysEntityBeforeInsert_Tfnc()
DROP FUNCTION IF EXISTS public."SysEntityBeforeInsert_Tfnc"() CASCADE;

CREATE OR REPLACE FUNCTION public."SysEntityBeforeInsert_Tfnc"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the created date
	IF NEW."DateCreated" IS NULL THEN 
		NEW."DateCreated" := CURRENT_TIMESTAMP;
	END IF;
RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."SysEntityBeforeInsert_Tfnc"()
    OWNER TO postgres;

COMMENT ON FUNCTION public."SysEntityBeforeInsert_Tfnc"()
    IS 'Create the function to set de current timestamp for the datecreated field.
	This funtion is used by the SysEntity_Tbl table before insert trigger.';

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	Step 2: create the trigger before insert in the SysEntity table
-- Trigger: SysEntityBeforeInsert_Trg
DROP TRIGGER IF EXISTS "SysEntityBeforeInsert_Trg" ON public."SysEntity_Tbl" CASCADE;

CREATE TRIGGER "SysEntityBeforeInsert_Trg"
    BEFORE INSERT
    ON public."SysEntity_Tbl"
    FOR EACH ROW
    EXECUTE FUNCTION public."SysEntityBeforeInsert_Tfnc"();

COMMENT ON TRIGGER "SysEntityBeforeInsert_Trg" ON public."SysEntity_Tbl"
    IS 'Set the datetime UTC of the DateCreated field';

-- #########################################################################################################################################################################################
-- Third create the trigger before update
--	Step 1: create the function before update
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FUNCTION: public.SysEntityBeforeUpdate_Tfnc()
DROP FUNCTION IF EXISTS public."SysEntityBeforeUpdate_Tfnc"() CASCADE;

CREATE OR REPLACE FUNCTION public."SysEntityBeforeUpdate_Tfnc"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
	v_TableHistory text;
	v_TableHistoryOld text;
BEGIN
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the DateTimeStamp
	NEW."DateTimeStamp" := CURRENT_TIMESTAMP;
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the created date
	IF NEW."TableHistory" = 'SetNull' THEN 
		NEW."TableHistory" := NULL;
	ELSEIF NEW."TableHistory" = 'SetOff' THEN
		NEW."TableHistory" := OLD."TableHistory";
	ELSE
		v_TableHistoryOld := OLD."TableHistory";
		v_TableHistory = '';
		IF NEW."EntityIDn" <> OLD."EntityIDn" THEN v_TableHistory := OLD."EntityIDn"; ELSE v_TableHistory := 'â '; END IF;
		IF NEW."MicroserviceIDn" <> OLD."MicroserviceIDn" THEN v_TableHistory := OLD."MicroserviceIDn"; ELSE v_TableHistory := 'â '; END IF;
		IF NEW."BusinessUnitIDn" <> OLD."BusinessUnitIDn" THEN v_TableHistory := OLD."BusinessUnitIDn"; ELSE v_TableHistory := 'â '; END IF;
		IF NEW."EntityTypeIDn" <> OLD."EntityTypeIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'â ',OLD."EntityTypeIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF NEW."StateIDn" <> OLD."StateIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'â ',OLD."StateIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF NEW."CreatedByIDn" <> OLD."CreatedByIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'â ',OLD."CreatedByIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF NEW."LastModifiedByIDn" <> OLD."LastModifiedByIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'â ',OLD."LastModifiedByIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF NEW."OwnerIDn" <> OLD."OwnerIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'â ',OLD."OwnerIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF v_TableHistoryOld IS NULL THEN v_TableHistory := CONCAT(v_TableHistory,'â ',NEW."DateCreated"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF NEW."DateTimeStamp" <> OLD."DateTimeStamp" THEN v_TableHistory := CONCAT(v_TableHistory,'â ',OLD."DateTimeStamp"); ELSE v_TableHistory := CONCAT(v_TableHistory,'â '); END IF;
		IF v_TableHistoryOld IS NULL THEN
			NEW."TableHistory" := v_TableHistory;
		ELSE
			NEW."TableHistory" := CONCAT(v_TableHistory,'â¡',v_TableHistoryOld);
		END IF;
		
	END IF;
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."SysEntityBeforeUpdate_Tfnc"()
    OWNER TO postgres;

COMMENT ON FUNCTION public."SysEntityBeforeUpdate_Tfnc"()
    IS 'Create the function to set the new datetimestamp and the history of the record.
	This funtion is used by the SysEntity_Tbl table before update trigger.';

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	Step 2: create the trigger before update in the SysEntity table
-- Trigger: SysEntityBeforeUpdate_Trg
DROP TRIGGER IF EXISTS "SysEntityBeforeUpdate_Trg" ON public."SysEntity_Tbl" CASCADE;

CREATE TRIGGER "SysEntityBeforeUpdate_Trg"
    BEFORE UPDATE 
    ON public."SysEntity_Tbl"
    FOR EACH ROW
    EXECUTE FUNCTION public."SysEntityBeforeUpdate_Tfnc"();

COMMENT ON TRIGGER "SysEntityBeforeUpdate_Trg" ON public."SysEntity_Tbl"
    IS 'Set the datetime UTC and the record History.';
