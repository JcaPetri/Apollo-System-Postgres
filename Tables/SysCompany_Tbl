-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-- Create the SysCompany_Tbl table
-- Contains the company information. 
-- The company exists since you create them in this table. 
-- It`s information, of what are they, are in the BaseElement_Tbl table.
-- The primary key: is the CompanyIDn field and must be unique.

-- #########################################################################################################################################################################################
-- First create the Table
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Table: public.SysCompany_Tbl
DROP TABLE IF EXISTS public."SysCompany_Tbl" CASCADE;

CREATE TABLE IF NOT EXISTS public."SysCompany_Tbl"
(
    "CompanyIDn" integer NOT NULL,
    "StateIDn" smallint NOT NULL,
    "CreatedByIDn" integer NOT NULL,
    "LastModifiedByIDn" integer NOT NULL,
    "OwnerIDn" integer NOT NULL,
    "DateCreated" timestamp without time zone NOT NULL,
    "DateTimeStamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "TableHistory" text COLLATE pg_catalog."default",
    CONSTRAINT "ScoPk_CompanyIDn" PRIMARY KEY ("CompanyIDn")
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."SysCompany_Tbl"
    OWNER to postgres;

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Create the comments of the table fields elements
-- 
COMMENT ON TABLE public."SysCompany_Tbl"
    IS 'Contains the business unit information. 
The business unit exists since you create them in this table. 
It`s information, of what are they, are in the BaseElement_Tbl table.
The primary key: is the BusinessUnitIDn field and must be unique for each Company.';

COMMENT ON COLUMN public."SysCompany_Tbl"."CompanyIDn"
    IS 'The CompanyIDn is the company that the business unit belong. Link with the SysCompany_Tbl.';

COMMENT ON COLUMN public."SysCompany_Tbl"."StateIDn"
    IS 'The StatedIDn is the IDNum that define if the record is enable or not.';

COMMENT ON COLUMN public."SysCompany_Tbl"."CreatedByIDn"
    IS 'The CreatedByIDn is the IDNum of the user who created the record.';

COMMENT ON COLUMN public."SysCompany_Tbl"."LastModifiedByIDn"
    IS 'The LastModifiedByIDn is the IDNum of the last user who modified the record.';

COMMENT ON COLUMN public."SysCompany_Tbl"."OwnerIDn"
    IS 'The OwnerIDn is the IDNum of the record owner.';

COMMENT ON COLUMN public."SysCompany_Tbl"."DateCreated"
    IS 'The DateCreated is the record creation datetime UTC.';

COMMENT ON COLUMN public."SysCompany_Tbl"."DateTimeStamp"
    IS 'The DateTimeStamp is the datetime UTC of the last modification.';

COMMENT ON COLUMN public."SysCompany_Tbl"."TableHistory"
    IS 'The TableHistory contain then change history of each column.';

-- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Create the comments of the constraint elements
-- 
COMMENT ON CONSTRAINT "ScoPk_CompanyIDn" ON public."SysCompany_Tbl"
    IS 'The ScoPk_CompanyIDn came from the SysBaseElement, thats is a integer generated value.';

-- #########################################################################################################################################################################################
-- Second create the trigger before insert
--	Step 1: create the function before insert
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FUNCTION: public.SysCompanyBeforeInsert_Tfnc()
DROP FUNCTION IF EXISTS public."SysCompanyBeforeInsert_Tfnc"() CASCADE;

CREATE OR REPLACE FUNCTION public."SysCompanyBeforeInsert_Tfnc"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the created date
	IF NEW."DateCreated" IS NULL THEN 
		NEW."DateCreated" := CURRENT_TIMESTAMP;
	END IF;
RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."SysCompanyBeforeInsert_Tfnc"()
    OWNER TO postgres;

COMMENT ON FUNCTION public."SysCompanyBeforeInsert_Tfnc"()
    IS 'Create the function to set de current timestamp for the datecreated field.
	This funtion is used by the SysCompany_Tbl table before insert trigger.';

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	Step 2: create the trigger before insert in the SysCompany table
-- Trigger: SysCompanyBeforeInsert_Trg
DROP TRIGGER IF EXISTS "SysCompanyBeforeInsert_Trg" ON public."SysCompany_Tbl" CASCADE;

CREATE TRIGGER "SysCompanyBeforeInsert_Trg"
    BEFORE INSERT
    ON public."SysCompany_Tbl"
    FOR EACH ROW
    EXECUTE FUNCTION public."SysCompanyBeforeInsert_Tfnc"();

COMMENT ON TRIGGER "SysCompanyBeforeInsert_Trg" ON public."SysCompany_Tbl"
    IS 'Set the datetime UTC of the DateCreated field';

-- #########################################################################################################################################################################################
-- Third create the trigger before update
--	Step 1: create the function before update
-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- FUNCTION: public.SysCompanyBeforeUpdate_Tfnc()
DROP FUNCTION IF EXISTS public."SysCompanyBeforeUpdate_Tfnc"() CASCADE;

CREATE OR REPLACE FUNCTION public."SysCompanyBeforeUpdate_Tfnc"()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
	v_TableHistory text;
	v_TableHistoryOld text;
BEGIN
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the DateTimeStamp
	NEW."DateTimeStamp" := CURRENT_TIMESTAMP;
	-- ------------------------------------------------------------------------------------------------------------------
	-- Set the created date
	IF NEW."TableHistory" = 'SetNull' THEN 
		NEW."TableHistory" := NULL;
	ELSEIF NEW."TableHistory" = 'SetOff' THEN
		NEW."TableHistory" := OLD."TableHistory";
	ELSE
		v_TableHistoryOld := OLD."TableHistory";
		v_TableHistory = '';
		IF NEW."CompanyIDn" <> OLD."CompanyIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."CompanyIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."StateIDn" <> OLD."StateIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."StateIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."CreatedByIDn" <> OLD."CreatedByIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."CreatedByIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."LastModifiedByIDn" <> OLD."LastModifiedByIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."LastModifiedByIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."OwnerIDn" <> OLD."OwnerIDn" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."OwnerIDn"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN v_TableHistory := CONCAT(v_TableHistory,'†',NEW."DateCreated"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF NEW."DateTimeStamp" <> OLD."DateTimeStamp" THEN v_TableHistory := CONCAT(v_TableHistory,'†',OLD."DateTimeStamp"); ELSE v_TableHistory := CONCAT(v_TableHistory,'†'); END IF;
		IF v_TableHistoryOld IS NULL THEN
			NEW."TableHistory" := v_TableHistory;
		ELSE
			NEW."TableHistory" := CONCAT(v_TableHistory,'‡',v_TableHistoryOld);
		END IF;
		
	END IF;
	RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public."SysCompanyBeforeUpdate_Tfnc"()
    OWNER TO postgres;

COMMENT ON FUNCTION public."SysCompanyBeforeUpdate_Tfnc"()
    IS 'Create the function to set the new datetimestamp and the history of the record.
	This funtion is used by the SysCompany_Tbl table before update trigger.';

-- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	Step 2: create the trigger before update in the SysCompany table
-- Trigger: SysCompanyBeforeUpdate_Trg
DROP TRIGGER IF EXISTS "SysCompanyBeforeUpdate_Trg" ON public."SysCompany_Tbl" CASCADE;

CREATE TRIGGER "SysCompanyBeforeUpdate_Trg"
    BEFORE UPDATE 
    ON public."SysCompany_Tbl"
    FOR EACH ROW
    EXECUTE FUNCTION public."SysCompanyBeforeUpdate_Tfnc"();

COMMENT ON TRIGGER "SysCompanyBeforeUpdate_Trg" ON public."SysCompany_Tbl"
    IS 'Set the datetime UTC and the record History.';
