Main Structure of all Microservices
Group: com.apolo
Name: system / articles / persons / users

========================================================================================================================================================================================
System Microservice
Definitions:
	Contains the system structure of all the software. In this module you need to create all the databases and java classes, enums, interfaces, entities, etc.
	The main tables of this module will be in the other databases such as mirrors. These mirror tables will be updated via Kafka topics.
	With this mechanism each microservice becames independent of the others. Example: MirSysCompanies, MirSysBusinessUnits, etc.
	One important thing, is you make a mirror only of the records that need in the other microservice, not all the records that exists in the System Microservice.

Structure are as follows:
	Used to create the main elements
		SysBaseElements_Tbl	--> Contains the diccionary of all system elements of the Microservice.
		SysBaseElementLanguages_Tbl	--> Contains the meaning of the diccionary in other languages.
		SysBaseElementComments_Tbl	--> Contains one or more comments/details/explains of each record of the diccionary.
	Used to create multiples tables
		SysRootElements_Tbl	--> Contains the other element of the system. When you enter the IDNum in this table, you active the element to be used in other microservices. 
	Used to create the software structure
		SysEntities_Tbl	--> Contains the entities of the system, they can be database tables or java classes.
		SysEntityFields_Tbl	--> Contains the fields or the columns of the entities.
		SysEntityStructures_Tbl	--> Contains each structure of the database tables or java classes.
		SysEntityStructureFieldProperties_Tbl	--> Contains the properties of each field or column. They can be DataType, Lenght, etc.
		SysEntityStructureFieldDefaultValues_Tbl	--> Contains the default value of each field or column. When you enter a value, you can set this and the user don't need to set.
	Used to create the Companies and theis Structures
		SysCompanies_Tbl	--> Contains the companies that use the software.
		SysCompanyTree_Tbl	--> Contains the structure of each company. If you have a economic group in this table can build this structure. 

========================================================================================================================================================================================
Detailed explanation of each table.
	---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Used to create the main elements
		SysBaseElements_Tbl
			Contains the diccionary of all system elements of the Microservice.
			For each code entered generates an ID (uniqueidentifier) ​​and an IDNum unique auto-numeric value are generated.
			The rest of the tables only have the IDNum. To determine what a code means, you should consult this table.
			In order for the same IDName word to have different meanings depending on its use, it is defined for a Scope, BusinessUnit and Language.
			To respect all the rules the unique value must be the combination of: Name/Scope/BusinessUnit/Language.
			The unique Key is the union of:
			  IDName     		-> is the readable code by the user.
			  ScopeIDn     		-> the Name must be unique for the application Scope, usually a Table.
			  BusinessUnitIDn 	-> the Name must be unique for the BusinessUnit.
			  LanguageIDn 		-> the Name must be unique for Language. This dictionary has a default language defined.
			Important: when you create the element/object in this tabel, this element don't exits for the software. This table is like a dictionary.
						Only exist when you create the code in the specific table.
				Example: the pampa article is created in the dictionary, but it does not exist until it is created in the Articles table.
			Modification Rules:
				You can change the Name if there is a spelling error. Example you have an spelling error in a invoce and must be invoice.
				Warning: If I change the code that represents the word Invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
				If you want to change the code and it is in many places, the system must generate another code for the new value
				To change this value, it must be done by the administrator. 
				It is best to never change it.
			Comments:
				In each microservice and database, you have one DataElement_Tbl. It work as a specific dictionary for it.
				Example:
					In the System Microservice you have the meaning of all databases tables, columns, stored procedures, views, java entities, classes, etc.
					In the Person Microservice you have the meaning of all person (legal or natural) whom can interact with the system.
					In the Users Microservice you have the meaning of all person who can enter in the system to work with. 
					In the Articles Microservice you have the meaning of all the articles that the campany can handle, to sell, buy, or have to use. 
			Tips:
				The ScopeIDn + BusinessUnitIDn combination can be the Kafka/rabbitMq topic.	 (+ MicroserviceIDn + )

		SysBaseElementLanguages_Tbl	
			Contains the meaning of the diccionary in another languages than the default.
			In this table you have to comply with the same rules as the TBaseElement table.
			The unique Key is the union of:
			  	IDNum			--> Is the number unique autonumerical value. It is created in the SysBaseElements_Tbl.
				-- This two values are defined by the user.
			  	IDName     		-> is the readable code by the user.
			  	LanguageIDn 	-> the Name must be unique for the new Language. It must be diferent from the default language.
			  	-- This two values are set by the system automaticaly, and are the same as the SysBaseElement_Tbl. For do that use the IdNum.
			  	BaseElementLanguageIDn	--> the IdNum of the element that has another langueges.
			  	ScopeIDn     	-> the Name must be unique for the application Scope, usually a Table.
			  	BusinessUnitIDn	-> the Name must be unique for the BusinessUnit.
			Clarification: the values IdNum, ScopeIDn, CompanyIDn = are always equal to the ApplTDataElement table. 
					These columns are put in this table only to ensure integrity and that there are no duplicates.
	
		SysBaseElementComments_Tbl	
			Contains one or more descriptions/comments/details/explains of each record of the diccionary.
			It has a defined language, an order when there is more than one description, a type of text format (mimetype), a status and the date of the last update.
			If the element has not been recorded in this table, it means the element hasn't clarifications.

	---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Used to create multiples tables
		SysRootElements_Tbl
			Contains the other element of the system. 
			When you enter the IDNum in this table, you active the element to be used in other microservices. 
			The unique Key is the union of:
				RootElementIDn 		--> the IdNum of the entity
				MicroserviceIDn		--> the IdNum of the Microservice that the Entity belong. When is equal System, all microservices of the BusinessUnit have access to them.
				BusinessUnitIDn		--> the IdNum of the BusinessUnit that the Entity and Microservice belong.
			Example: In the BaseElement_Tbl you have been created all values of the SysContries or SysLangueges, etc. This table is the diccionary and this values can't use it.
					 To make real and enable these values, we must to create a specific table for its. 
					 But if you are going to use only somes record of each tables, is bether have one table with all small tables. This table is called SysRootElement_Tbl.
			Tips:
				The RootElementIDn + MicroserviceIDn + BusinessUnitIDn combination can be the Kafka/rabbitMq topic.		 
					 
	---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Used to create the software structure
		SysEntities_Tbl	
			Contains the entities of the system, they can be database tables or java classes.
			The entity exist since you create it in this table. It´s information, of what are they, are in the BaseElement table.
			The unique Key is the union of:
				EntityIDn 		--> the IdNum of the entity
				MicroserviceIDn --> the IdNum of the Microservice that the Entity belong. When is equal System, all microservices hava access to them.
				BusinessUnitID	--> the IdNum of the BusinessUnit that the Entity and Microservice belong.
			Important:
				The Entity is generated in the SysEntities_Tbl for a BusinessUnit and Microservice.
				The data is created in the BaseElement_Tbl and is the same to all the BusinessUnit.
				When I create the entity, I define the business unit owner and the microservice it belongs to.
				That is the reason why you generate a new ID and IdNum for this table. 
			Tips:
				The EntityIDn + MicroserviceIDn + BusinessUnitIDn combination can be the Kafka/rabbitMq topic.		 
	
		SysEntities_Tbl	
			Contains the fields or the columns of the entities.
			The fields exits to the entity, since you create it in this table. It´s information, of what are they, are in the BaseElement table.
			The unique Key is the union of:
				FieldIDn 		--> The FieldIDn is the IDNum of the field. Link with the diccionary table - SysBaseElement.
				BusinessUnitIDn	--> The BusinessUnitIDn is the business unit that the entities belong. Link with the SysCompany.
				MicroserviceIDn --> the IdNum of the Microservice that the Entity belong. When is equal System, all microservices hava access to them.
				BusinessUnitID	--> the IdNum of the BusinessUnit that the Entity and Microservice belong.


The primary key: is the union of FieldIDn + BusinessUnitID.
Since no field defined in BaseElement_Tbl is modified in this table, the same IDNum can be used.




Companies_Tbl
CompaniesTrees_Tbl
BusinessUnits_Tbl 

Persons Microservice
BusinessUnitsTradeUnits_Tbl
TradeUnits_Tbl
TradeUnitsPersons_Tbl
Persons_Tbl


Steps to build the Software:
Common Structure of each Microservice:

	General comments
		All values are created in tables. These tables work like a dictionary, so that, if you don't create them in the specific table it is as if they did not exist for the system. 
		Example: the steps to create an Article and a Warehouse and then make a relation between them are:
			First create an article in TBaseElement and then in the LogTArticles tables
			Second create a warehouse in TBaseElement and then in the LogTWarehouses tables
			To make a relation between Articles and Warehouses you make it joining the tables LogTArticles and LogTWarehouses. 
			You use the TBaseElement table to get the meaning of each code.


Definition: 
Companies_Tbl, contains the companies that use the software. 

CompanyTrees_Tbl, contains the structure father/son. Here you can build the tree of the groups companies.
Then you can join each of them with the Business Unit. This type of structure allow you to get a individual or group report.

BusinessUnit_Tbl, contains the comercial unit. This is the lower level of the company. The BusinessUnit could be a car saler or a parts sales. Relationship between Companies_Tbl and BusinesUnit_Tbl is one Company can have multiple BusinessUnit, so in the BusinessUnit_Tbl you have the CompanyId key. Example: one company could have one or more BusinessUnits, each of which is very diferent business. To clear up, Tagle Group is the main Company, and Nixsa, Motcor, Avant are the Trade Units. When you define any concepts to a Tagle Group, these apply to all BusinessUnits that depend on.

The tables structure are as follows:
System Microservice
Companies_Tbl
CompaniesTrees_Tbl
BusinessUnits_Tbl 

Persons Microservice
BusinessUnitsTradeUnits_Tbl
TradeUnits_Tbl
TradeUnitsPersons_Tbl
Persons_Tbl

Persons_Tbl, contains the personal basic data of persons. They can be a natural or a legal person. One person can be a Client or a supplier or both. 
The persons exists since you create them in this table, and is the same for all system and belong to a Nationality.
The unique key: are PersonKey + PersonKeyTypeIDn + NationalityIDn fields and must be unique. PersonKeyType can be DNI/LC/Passport/GreenCard and its depend of the country.
The information of what are each code, are in the PerBaseElements_Tbl.

TradeUnit_Tbl, contains the information of the minimal comercial client/supplier unit. Each record are a real comercial entity. This Minimal Comercial Unit (MCU) never changes, so that, you can have all the history of it. 
The information of what are each code, are in the PerBaseElements_Tbl.
Comments, 1- TradeUnit exists since you create them in this table. 
2- One TradeUnit can have one or more Persons.
The unique key: is the TradeUnitIDn + BusinessUnitIDn fields and must be unique.

TradeUnitPerson_Tbl, contains the relationship between TradeUnit and Persons. Thats means One TradeUnit can have one or more Persons. 
This structure allow you to handle diferent scenarios:
1- If the Person chance the name or cuit, you can create another persona and mapped to the same TradeUnit, and set the old perons to desable. When you get the history you use the TradeUnit and not the PersonId.
2- If the Person get divided, and get another PersonID. You can mapped old PersonId to another TradeUnit and the new PersonId join with the old TradeUnit. 
With this schemas you can mapped the reality in the software. 

BusinessUnitsTradeUnits_Tbl, contains the relationship between BusinessUnits and TradeUnits. Here we construct the relation between the BusinessUnit Company with the client and/or the suppliers that are representing in the TradeUnits.
Thats means One BusinessUnit can have one or more TradeUnits, and One TradeUnits can have one or more BusinessUnits.
