Main Structure of all Microservices
Group: com.apolo
Name: system / articles / persons / users

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
System Microservice
Definitions:
	It contains the system structure of all the software. In this module you need to create all the databases and java classes, enums, interfaces, entities, etc.
	The main tables of this module will be in the other databases such as mirrors. These mirror tables will be updated via Kafka topics.
	With this mechanism each microservice becames independent of the others. Example: MirSysCompanies, MirSysBusinessUnits, etc.
	One important thing, is you make a mirror only of the records that need in the other microservice, not all the records that exists in the System Microservice.

Structure are as follows:
	Used to create the main elements
		SysBaseElements_Tbl	--> Contains the diccionary of all system elements of the Microservice.
		SysBaseElementLanguages_Tbl	--> Contains the meaning of the diccionary in other languages.
		SysBaseElementComments_Tbl	--> Contains one or more comments/details/explains of each record of the diccionary.
	Used to create the software structure
		SysEntities_Tbl	--> Contains the entities of the system, they can be database tables or java classes.
		SysEntityFields_Tbl	--> Contains the fields or the columns of the entities.
		SysEntityStructures_Tbl	--> Contains each structure of the database tables or java classes.
		SysEntityStructureFieldProperties_Tbl	--> Contains the properties of each field or column. They can be DataType, Lenght, etc.
		SysEntityStructureFieldDefaultValues_Tbl	--> Contains the default value of each field or column. When you enter a value, you can set this and the user don't need to set.
	Used to create the Companies and theis Structures
		SysCompanies_Tbl	--> Contains the companies that use the software.
		SysCompanyTree_Tbl	--> Contains the structure of each company. If you have a economic group in this table can build this structure. 
	Used to create multiples tables
		SysRootElements_Tbl	--> Contains the active element of the system. When you enter the IDNum in this table, you can use the value in other microservices. 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Detailed explanation of each table.
	SysBaseElements_Tbl
		Contains the diccionary of all system elements of the Microservice.
		Each code entered generates an ID (uniqueidentifier) ​​and an IDNum unique autonumerical value.
		The rest of the tables only have the IDNum. To determine what a code means, you should consult this table.
		In order for the same IDName word to have different meanings depending on its use, it is defined for a Scope, BusinessUnit and Language.
		To respect all the rules the unique value must be the combination of: Name/Scope/BusinessUnit/Language.
		is unique for a:
		  Name     	-> is the readable code by the user.
		  Scope     	-> the Name must be unique for the application Scope, usually a Table.
		  BusinessUnit 	-> the Name must be unique for the BusinessUnit.
		  Language 	-> the Name must be unique for Language. This dictionary has a default language defined.
		Important: when you create the element/object in this tabel, this element don't exits for the software. This table is like a dictionary.
				Only exist when you create the code in the specific table.
			Example: the pampa article is created in the dictionary, but it does not exist until it is created in the Articles table.
		Tips:
			The Scope and BusinessUnit combination can be the Kafka/rabbitMq topic.

	SysBaseElementLanguages_Tbl	
		Contains the meaning of the diccionary in other languages.
		is unique for a:
		  -- This two values are defined by the user.
		  Name     		-> is the readable code by the user.
		  Language 		-> the Name must be unique for the new Language. It must be diferent from the default language.
		  -- This two values are set by the system automaticaly, and are the same as the SysBaseElement_Tbl. For do that use the IdNum.
		  BaseElementLanguageIDn	--> the IdNum of the element that has another langueges.
		  Scope     	-> the Name must be unique for the application Scope, usually a Table.
		  BusinessUnit 	-> the Name must be unique for the BusinessUnit.

	SysBaseElementComments_Tbl	
		Contains one or more descriptions/comments/details/explains of each record of the diccionary.
		It has a defined language, an order when there is more than one description, a MimeType text format, a status and the date of the last update.

	SysEntities_Tbl	
		Contains the entities of the system, they can be database tables or java classes.


Companies_Tbl
CompaniesTrees_Tbl
BusinessUnits_Tbl 

Persons Microservice
BusinessUnitsTradeUnits_Tbl
TradeUnits_Tbl
TradeUnitsPersons_Tbl
Persons_Tbl


Steps to build the Software:
Common Structure of each Microservice:
General comments
All values are created in tables. These tables work like a dictionary, so that, if you don't create them in the specific table it is as if they did not exist for the system. 
Example: the steps to create an Article and a Warehouse and make a relation between them are:
First create an article in TBaseElement and then in the LogTArticles tables
Second create a warehouse in TBaseElement and then in the LogTWarehouses tables
To make a relation between Articles and Warehouses you make it joining the tables LogTArticles and  LogTWarehouses. 
You use the TBaseElement table to get the meaning of each code.

Data Element
This is the dictionary table for the system records. For each code entered, an ID (uniqueidentifier) and a unique auto-numeric value are generated. This code is used in the others tables, if you want to know what are the meaning of one code, here you can look for.
It contains the information generated by the users of the system. Depending of the type of microservices is the kind of information that are in this tables. Example:
In the System Microservice you have the meaning of all databases tables, columns, stored procedures, views, etc. For java software you have the entities, classes, etc.
In the Person Microservice you have the meaning of all person (legal or natural) whom can interact with the system. They coul be suppliers or clients.
In the Users Microservice you have the meaning of all person who can enter in the system to work with. 
In the Articles Microservice you have the meaning of all the articles that the campany can handle, to sell, buy, or have to use. 
It is unique for a:
-- Name (it is the code readable by the user).
-- Scope (the Name must be unique for the scope, wich usually represents a tables).
-- Company (the Name must be unique for the Company).
-- Language (the Name must be unique for the default language)
This way we make sure we do not duplicate information, and we have that a Name is unique for a Company, Scope (Table) and a Language.
The rest of the tables have a link to this table to identify what type of element it is.

Modification Rules:
You can change the Name if there is a spelling error. Example you have an spelling error in a invoce and must be invoice.
Warning: If I change the code that represents the word Invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
If you want to change the code and it is in many places, the system must generate another code for the new value

Tips:
To change this value, it must be done by the administrator. It is best to never change it.

Tips:
The combination of MicroserviceName-CompanyScope is the ID for kafka software.
Ex: SystemPeperinaTables


Data Element Language
It contains the meaning of the Name in another language than the default. In this table you have to comply with the same rules as the TBaseElement table.
Clarification: the values Num, Scope, Company = are always equal to the ApplTDataElement table. These columns are put in this table only to ensure integrity and that there are no duplicates.

Data Element Documentation
It contains one or more descriptions of the element from the DataElement table. If the element has not been recorded in this table, it means the element hasn't clarifications.
When you insert comments you must define the language, the order when there are more than one comments and a type of text.

Data Root Element
It contains all elements that have been created out of the dataElement table. Example: when you create the element in the articles tables, you must create it in the RootElement table. 
Here could be good to record in wich table this element had been created


Definition: 
Companies_Tbl, contains the companies that use the software. 

CompanyTrees_Tbl, contains the structure father/son. Here you can build the tree of the groups companies.
Then you can join each of them with the Business Unit. This type of structure allow you to get a individual or group report.

BusinessUnit_Tbl, contains the comercial unit. This is the lower level of the company. The BusinessUnit could be a car saler or a parts sales. Relationship between Companies_Tbl and BusinesUnit_Tbl is one Company can have multiple BusinessUnit, so in the BusinessUnit_Tbl you have the CompanyId key. Example: one company could have one or more BusinessUnits, each of which is very diferent business. To clear up, Tagle Group is the main Company, and Nixsa, Motcor, Avant are the Trade Units. When you define any concepts to a Tagle Group, these apply to all BusinessUnits that depend on.

The tables structure are as follows:
System Microservice
Companies_Tbl
CompaniesTrees_Tbl
BusinessUnits_Tbl 

Persons Microservice
BusinessUnitsTradeUnits_Tbl
TradeUnits_Tbl
TradeUnitsPersons_Tbl
Persons_Tbl

Persons_Tbl, contains the personal basic data of persons. They can be a natural or a legal person. One person can be a Client or a supplier or both. 
The persons exists since you create them in this table, and is the same for all system and belong to a Nationality.
The unique key: are PersonKey + PersonKeyTypeIDn + NationalityIDn fields and must be unique. PersonKeyType can be DNI/LC/Passport/GreenCard and its depend of the country.
The information of what are each code, are in the PerBaseElements_Tbl.

TradeUnit_Tbl, contains the information of the minimal comercial client/supplier unit. Each record are a real comercial entity. This Minimal Comercial Unit (MCU) never changes, so that, you can have all the history of it. 
The information of what are each code, are in the PerBaseElements_Tbl.
Comments, 1- TradeUnit exists since you create them in this table. 
2- One TradeUnit can have one or more Persons.
The unique key: is the TradeUnitIDn + BusinessUnitIDn fields and must be unique.

TradeUnitPerson_Tbl, contains the relationship between TradeUnit and Persons. Thats means One TradeUnit can have one or more Persons. 
This structure allow you to handle diferent scenarios:
1- If the Person chance the name or cuit, you can create another persona and mapped to the same TradeUnit, and set the old perons to desable. When you get the history you use the TradeUnit and not the PersonId.
2- If the Person get divided, and get another PersonID. You can mapped old PersonId to another TradeUnit and the new PersonId join with the old TradeUnit. 
With this schemas you can mapped the reality in the software. 

BusinessUnitsTradeUnits_Tbl, contains the relationship between BusinessUnits and TradeUnits. Here we construct the relation between the BusinessUnit Company with the client and/or the suppliers that are representing in the TradeUnits.
Thats means One BusinessUnit can have one or more TradeUnits, and One TradeUnits can have one or more BusinessUnits.
