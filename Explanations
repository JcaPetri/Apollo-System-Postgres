Estructura de todos los Microservicios y Sus relaciones
Group: com.apolo
name: articles / system / persons / users

Steps to build the Software:
System Microservice
It contains the system structure of all the software. In this module you need to create all the databases and java classes, enums, interfaces, entities, etc.
 Person Microservice
It contains the persons who can interact with all the software. This person can be natural or legal. In this module you need to add all information about the address, locations, etc.
 User Microservice
It contains the user of all the software. The user can be a natural or legal person, that had been created in the Person Microservice first. But in this module you need to add all information about the rights and duties of the users.

Common Structure of each Microservice:
General comments
All values are created in tables. These tables work like a dictionary, so that, if you don't create them in the specific table it is as if they did not exist for the system. 
Example: the steps to create an Article and a Warehouse and make a relation between them are:
First create an article in TBaseElement and then in the LogTArticles tables
Second create a warehouse in TBaseElement and then in the LogTWarehouses tables
To make a relation between Articles and Warehouses you make it joining the tables LogTArticles and  LogTWarehouses. 
You use the TBaseElement table to get the meaning of each code.

Data Element
This is the dictionary table for the system records. For each code entered, an ID (uniqueidentifier) and a unique auto-numeric value are generated. This code is used in the others tables, if you want to know what are the meaning of one code, here you can look for.
It contains the information generated by the users of the system. Depending of the type of microservices is the kind of information that are in this tables. Example:
In the System Microservice you have the meaning of all databases tables, columns, stored procedures, views, etc. For java software you have the entities, classes, etc.
In the Person Microservice you have the meaning of all person (legal or natural) whom can interact with the system. They coul be suppliers or clients.
In the Users Microservice you have the meaning of all person who can enter in the system to work with. 
In the Articles Microservice you have the meaning of all the articles that the campany can handle, to sell, buy, or have to use. 
It is unique for a:
-- Name (it is the code readable by the user).
-- Scope (the Name must be unique for the scope, wich usually represents a tables).
-- Company (the Name must be unique for the Company).
-- Language (the Name must be unique for the default language)
This way we make sure we do not duplicate information, and we have that a Name is unique for a Company, Scope (Table) and a Language.
The rest of the tables have a link to this table to identify what type of element it is.

Modification Rules:
You can change the Name if there is a spelling error. Example you have an spelling error in a invoce and must be invoice.
Warning: If I change the code that represents the word Invoice and it is an afip receipt. And I put food, everywhere the code is, food will start to appear.
If you want to change the code and it is in many places, the system must generate another code for the new value

Tips:
To change this value, it must be done by the administrator. It is best to never change it.

Tips:
The combination of MicroserviceName-CompanyScope is the ID for kafka software.
Ex: SystemPeperinaTables


Data Element Language
It contains the meaning of the Name in another language than the default. In this table you have to comply with the same rules as the TBaseElement table.
Clarification: the values Num, Scope, Company = are always equal to the ApplTDataElement table. These columns are put in this table only to ensure integrity and that there are no duplicates.

Data Element Documentation
It contains one or more descriptions of the element from the DataElement table. If the element has not been recorded in this table, it means the element hasn't clarifications.
When you insert comments you must define the language, the order when there are more than one comments and a type of text.

Data Root Element
It contains all elements that have been created out of the dataElement table. Example: when you create the element in the articles tables, you must create it in the RootElement table. 
Here could be good to record in wich table this element had been created


Definition: 
Companies_Tbl, in this table you can record the companies that use the software. 
CompanyTrees_Tbl, in this table you can develop the structure father/son. Then you can join each of them with the Business Unit. This type of structure allow you to get a individual or group report.
BusinessUnit_Tbl, in this table you create the base comercial unit. This is the lower level of the company. 
	Relationship between Companies_Tbl and BusinesUnit_Tbl is one Company can have multiple BusinessUnit, so in the BusinessUnit_Tbl you have the CompanyId key. 
	Example: one company could have one or more BusinessUnits, each of which is very diferent business, like car sales or parts sales. 
					To clear up, Tagle Group is the main Company, and Nixsa, Motcor, Avant are the BusinessUnits. 
					When you define any concepts to a Tagle Group, these apply to all BusinessUnits that depend on.

This structure allow you to handle diferent scenarios:
1- If the Person chance the name or cuit, you can create another persona and mapped to the same TradeUnit, and set the old perons to desable. When you get the history you use the TradeUnit and not the PersonId.
2- If the Person get divided, and get another PersonID. You can mapped old PersonId to another TradeUnit and the new PersonId join with the old TradeUnit. 
With this schemas you can mapped the reality in the software. 

Contains the Business Trade information. 
One BusinessTrade can have many Persons. They are the real individual or legal entity.
The unique key: is the BusinessTradeIDn + BusinessUnitIDn fields and must be unique.
